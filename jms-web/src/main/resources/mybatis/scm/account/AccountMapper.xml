<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jy.dao.system.account.AccountDao">
	<!--  com.jy.entity.system.account.Account -->
    <resultMap id="base" type="BaseAccount">
      <id column="ID" jdbcType="VARCHAR" property="accountId"/>
      <collection  property="poss"     column="ID" ofType="basePos" select="getPoss"/> 
    </resultMap> 
    <resultMap id="LoginLog" type="LoginLog" ></resultMap>
    <resultMap id="ZNodes" type="com.jy.common.utils.tree.entity.ZNodes"></resultMap>
    <resultMap id="basePos" type="BasePos"></resultMap>
    <!--配置一个resultMap 指定返回的类型 
    <resultMap id="departMent" type="Department">
        <id column="dp_id" property="dp_id" />
        <result column="dp_name" property="dp_name" />
        <result column="cost_center" property="cost_center" />
    </resultMap>
    -->
    <!-- 防止密码外泄，取消密码列 -->
    <select id="find" resultMap="base" parameterType="BaseAccount">
       select u.id as accountId,
		       u.loginName as loginName,
		       r.id as roleId,
		       r.name as roleName,
		       u.orgid as orgId,
		       u.orgname as orgName,
		       o.name  as company,
		       o.distcode  as distCode,
		       u.name as name,
		       u.userno as userNo,
		       u.picUrl as picUrl,
		       u.email as email,
		       u.type as type,
		       u.sex as sex,
		       u.mobile as mobile,
		       u.address as address,
		       u.emercontractor as emercontractor,
		       u.emercontractnm as emercontractNm,
		       u.rank as rank,
		       u.grade as grade,
		       u.isvalid as isvalid,
		       to_char(u.birthdaty,'yyyy/mm/dd') as birthdaty,
		       u.createtime as createTime,
		       u.createuser as createUser,
		       u.createname as createName,
		       u.updatetime as updateTime,
		       u.skin as skin,
		       u.description as description
		  from jy_base_account u
		  left join jy_base_ACCOUNT_ROLE ur
		    on u.id = ur.userid
		  left join jy_base_role r
		    on ur.roleid = r.id
		  left join jy_base_org o on o.id=u.company
        WHERE 1=1 
       <if test="loginName != null and loginName !='' ">
        	and u.loginName=#{loginName}
       </if>
       <if test="accountId != null and accountId !=''">
        	and u.id=#{accountId}
       </if> 
    </select> 
   
 	<select id="findByPage"  resultMap="base" parameterType="BaseAccount">
        select u.id,
		       u.loginName,
		       (select orggrade from jy_base_org where id=u.orgid) as orgGrade,
		       u.orgname     as orgName,
		       u.mobile,
		       (select name from jy_base_org where id=u.company) as company,
		       u.name,
		       u.picUrl,
		       u.email,
		       u.isvalid,
		       u.createtime,
		       u.updatetime,
		       u.skin,
		       u.description
		  from jy_base_account u
        WHERE 1=1
       <if test='param.isValid != null and param.isValid != ""'>
        	AND u.isValid=#{param.isValid}
       </if>  
       <if test='param.orgId != null and param.orgId !=""'>
        	AND u.orgid IN (SELECT jbg.id FROM jy_base_org jbg start with jbg.id=#{param.orgId} connect by prior jbg.id = jbg.pid)
       </if>
       <if test='param.keyWord != null and param.keyWord != ""'>
        	AND u.name like '%'||#{param.keyWord}||'%'
       </if> 
        ORDER BY u.createTime desc
    </select>  
    <select id="count"  resultType="int" parameterType="BaseAccount">
       SELECT count(*) FROM jy_base_account u  WHERE 1=1 
    </select>   
    
 	<insert id="insert"  parameterType="BaseAccount">	
 	<![CDATA[
		insert into jy_base_account
		  (id, orgid, orgname, company, name, userno, type, sex, mobile, email, loginname, password, address, emercontractor, emercontractnm, skin, rank, grade, isvalid, birthdaty, createtime, createuser, createname, description, salt)
		values
		  (#{accountId}, #{orgId}, #{orgName}, #{company}, #{name}, #{userNo}, #{type}, #{sex}, #{mobile}, #{email}, #{loginName}, #{password}, #{address}, #{emercontractor}, #{emercontractNm}, #{skin}, #{rank}, #{grade}, #{isValid}, to_date(#{birthdaty},'yyyy/mm/dd hh24:mi:ss'), SYSDATE, #{createUser}, #{createName}, #{description}, #{salt})
	]]>  
	</insert>
	<delete id="delete" parameterType="BaseAccount">
	delete from jy_base_account  
	WHERE id=#{accountId}
	</delete>
	<delete id="deleteBatch" parameterType ="java.util.List">
	DELETE FROM jy_base_account WHERE id in(
		<foreach item="o" collection="list" open="" separator="," close="" >
			#{o.accountId}
		</foreach>
		)
	</delete>
	<update id="update" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET name =#{name},
			orgid=#{orgId}, 
			orgname=#{orgName}, 
			company=#{company},
			userno=#{userNo}, 
			type=#{type}, 
			sex=#{sex}, 
			mobile=#{mobile},
			address=#{address}, 
			emercontractor=#{emercontractor}, 
			emercontractnm=#{emercontractNm}, 
			rank=#{rank}, 
			grade=#{grade}, 
			birthdaty=to_date(#{birthdaty},'yyyy/mm/dd'),
			email =#{email},
			isValid =#{isValid},
			updateTime =#{updateTime},
			description =#{description}
		WHERE id=#{accountId}
	</update>
    <!-- 这方法能获取密码和盐 -->
    <select id="findFormatByLoginName"  resultMap="base" parameterType="String">
    	<![CDATA[
       SELECT a.* FROM jy_base_account a WHERE 1=1 
       AND a.isvalid='1' 
       AND a.loginname=#{loginName,jdbcType=VARCHAR}
       ]]>  
    </select>
    <!-- 这方法不能能获取密码和盐 -->
    <select id="findAccountById"  resultMap="base" parameterType="String">
       SELECT  t.id,
       		  t.loginName,
       		  t.name,
       		  t.picUrl,
       		  t.email,
       		  t.isValid,
       		  t.createTime,
       		  t.updateTime,
       		  t.skin,
       		  t.description,
       		  t.orgid as orgId
       	FROM jy_base_account t 
        WHERE t.id=#{accountId}
    </select>
   <update id="setSetting" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   skin =#{skin}
		WHERE id=#{accountId}
	</update>
	<select id="getPerData" resultMap="base" parameterType="String" >
		   SELECT t.id,
		   	  t.loginName,
       		  t.picUrl,
       		  t.name,
       		  t.email,   		  
       		  t.createTime,
       		  t.updateTime,
       		  t.description
       		  FROM jy_base_account t 
       	   WHERE t.isValid=1 and t.id=#{accountId}
	</select>
	<update id="setPerData" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   name =#{name},
			  email =#{email},
			  updateTime =#{updateTime}
		WHERE id=#{accountId}
	</update>
	<update id="setHeadpic" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   picUrl =#{picUrl},
			  updateTime =#{updateTime}
		WHERE id=#{accountId}
	</update>
	<select id="getRoles" resultMap="ZNodes">
		SELECT jbo.id,
			   jbo.pId,
			   jbo.name,
			   'o' as other 
		FROM jy_base_org jbo
		UNION ALL 
		SELECT 'role'||jbr.id as id,
			   jbr.orgId as pId,
			   jbr.name,
			   'r' as other 
		FROM jy_base_role jbr
	</select>
    <select id="findCountByLoginName" resultType="int">
       SELECT COUNT(*)
       		  FROM jy_base_account t 
       WHERE  t.loginName=#{loginName}
    </select> 
    <update id="resetPwd" parameterType="BaseAccount">
		UPDATE jy_base_account
		SET   password =#{password},
			  salt =#{salt}
		WHERE id=#{accountId}
	</update>
	
	<select id="getPoss"  parameterType="string" resultMap="basePos" >
	  SELECT jbp.* FROM jy_base_account_position jbap 
	  LEFT JOIN jy_base_position jbp
	  ON jbp.id=jbap.posId
	  WHERE jbap.accountId=#{ID}      
	  ORDER BY jbap.posId
    </select>
    
    <insert id="insertUserRole" parameterType="UserRole">
    	insert into jy_base_ACCOUNT_ROLE
		  (userId,roleId)
		values
		  (#{userId},#{roleId})
    </insert>
    
    <update id="updateAccountState" parameterType="BaseAccount">
		UPDATE jy_base_account
		SET   isvalid =#{isValid},
			  updatetime =#{updateTime},
			  updateuser = #{updateUser},
			  updateName = #{updateName}
		WHERE id=#{accountId}
	</update>
	
	<update id="batchUpdateAccountState"  parameterType="java.util.List">  
	        update jy_base_account
	        set isvalid=#{account.isValid},
	        	updateuser=#{account.updateUser},
	        	updatename=#{account.updateName},
	        	updatetime=sysdate
		    where id in
		    <foreach collection="list" item="item" open="(" separator="," close=")">
		    		#{item.accountId}
	   		</foreach>
	</update>
    
    <select id="findRoleList4Select" resultType="SelectData">
     
	 select id as key,name as value from jy_base_role where isvalid='1' 
    </select>
    
    <update id="updateRoleId" parameterType="BaseAccount">
    	update jy_base_account_role set roleid=#{roleId} where userid=#{accountId} and roleid=#{roleId2}
    </update>
    
    <select id="findOwnerRole" parameterType="String" resultType="UserRole">
            select jbr.id as roleId, jbr.name as roleName
		         from jy_base_account_role jbar
		         left join jy_base_role jbr
		           on jbar.roleid = jbr.id
		        where jbar.userid = #{accountId}
    </select>
    
    <delete id="delRole" parameterType="UserRole">
		delete from jy_base_account_role  
		WHERE userid=#{userId} and roleid=#{roleId}
	</delete>
	
	<select id="checkRoleIsExist" parameterType="UserRole" resultType="int">
		select count(1) from jy_base_account_role where userid=#{userId} and roleid=#{roleId}
	</select>
	<!-- and orgid=#{orgId} -->
	<select id="findRoles" resultType="BaseRole" parameterType="String">
<!-- 		select distinct id ,name from jy_base_role where isValid='1' and orgid=#{orgId} -->
		select distinct id ,name from jy_base_role where (isValid='1' and orgid=#{orgId}) or (isValid='2' and orgid='1')
	</select>
	
	<select id="findActiveRolesByUserId" resultType="UserRole" parameterType="String">
		select distinct ar.roleid as roleId from jy_base_account_role ar left join jy_base_role r on ar.roleid=r.id 
		where r.isvalid!='0' and ar.userid=#{userId}
	</select>
	
	<delete id="delRolesByUid" parameterType="String">
		delete from jy_base_account_role where userid=#{userId}
	</delete>
	
	<insert id="insertUserRoles" parameterType="java.util.List">
    	<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
	    	insert into jy_base_ACCOUNT_ROLE
			  (userId,roleId)
			values
			  (#{item.userId},#{item.roleId})
         </foreach>
    </insert>
    
    <select id="findOrgInfoById" resultType="BaseOrg">
    	select id as id,pid as pId,name as name,code as code,distcode as distcode,orgtype as orgType,orggrade as orgGrade from jy_base_org where id = #{id}
    </select>
    
    <insert id="insertDataAuthRecord" parameterType="dataAuth">
    	insert into jy_sys_data_auth
		  (userid, orgid, distid)
		values
		  (#{userId,jdbcType=VARCHAR}, #{orgId,jdbcType=VARCHAR}, #{distId,jdbcType=VARCHAR})
    </insert>
    
</mapper>