<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jy.dao.system.resources.ResourcesDao">
	<!-- com.jy.entity.system.resources.Resources -->
    <resultMap id="base" type="BaseResources"></resultMap>
    <resultMap id="ZNodes" type="com.jy.common.utils.tree.entity.ZNodes"></resultMap>
    <resultMap id="baseAndson" type="BaseResources">
   		<id column="ID" jdbcType="VARCHAR" property="id"/>
     	<collection property="nodes" column="id" ofType="baseAndson" select="getSon"/> 
    </resultMap>
    <select id="findAndson"  resultMap="baseAndson" parameterType="BaseResources">
       SELECT t.* FROM JY_BASE_RESOURCES t 
       WHERE t.id=#{id}
       ORDER BY t.parentId,t.type,t.sort
    </select> 
    <select id="find"  resultMap="base" parameterType="BaseResources">
       SELECT t.*,jbr.name as parentName FROM JY_BASE_RESOURCES t 
       LEFT JOIN JY_BASE_RESOURCES jbr 
       ON jbr.id=t.parentId
       WHERE 1=1 
       <if test="name != null and name!='' ">
        	AND t.name=#{name}
       </if>
       <if test="parentId != null and parentId!='' ">
        	AND t.parentId=#{parentId}
       </if>
       <if test="layer != null">
        	AND t.layer=#{layer}
       </if>
       <if test="id != null and id!='' ">
        	AND t.id=#{id}
       </if>
       <if test="type != null and type!='' ">
        	AND t.type=#{type}
       </if>
      
       ORDER BY t.parentId,t.type,t.sort
    </select> 
    <select id="findByPage"  resultMap="base" parameterType="BaseResources">
       SELECT t.* FROM JY_BASE_RESOURCES t WHERE 1=1 
      <if test="param.isValid!= null">
        	AND t.isValid=#{param.isValid}
       </if>
        ORDER BY t.parentId,t.type,t.sort
    </select>  
    <select id="count"  resultType="int" parameterType="BaseResources">
       SELECT count(*) FROM JY_BASE_RESOURCES t WHERE 1=1 
    </select>      
    <insert id="insert"  parameterType="BaseResources">	
 	<![CDATA[
	INSERT INTO JY_BASE_RESOURCES(
	id,name,parentId,layer,type,resUrl,btnId,btnFun,icon,sort,isValid,description,createTime
	) VALUES (
	#{id},#{name},#{parentId},#{layer},#{type},#{resUrl},#{btnId},#{btnFun},#{icon},#{sort},#{isValid},#{description},#{createTime}
	)
	]]>  
	</insert>
	<delete id="delete" parameterType="BaseResources">
	DELETE FROM JY_BASE_RESOURCES 
	WHERE id=#{id} 
	</delete>
	<delete id="delRoleAuthByResId" parameterType="String">
		DELETE from JY_BASE_ROLE_RESOURCES 
		WHERE resources_id=#{resourcesId} 
	</delete>
	<delete id="delOrgAuthByResId" parameterType="String">
		DELETE from JY_BASE_ORG_RESOURCES 
		WHERE resources_id=#{resourcesId} 
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
	DELETE FROM JY_BASE_RESOURCES 
	WHERE id in(
		<foreach item="o" collection="list" open="" separator="," close="" >
			#{o.id}
		</foreach>
		)
	</delete>
	<delete id="delBatchRoleAuthByResId" parameterType="java.util.List">
	DELETE from JY_BASE_ROLE_RESOURCES 
	WHERE resources_id IN(
		<foreach item="o" collection="list" open="" separator="," close="" >
			#{o.id}
		</foreach>
		)
	</delete>
		<delete id="delBatchOrgAuthByResId" parameterType="java.util.List">
	DELETE from JY_BASE_ORG_RESOURCES 
	WHERE resources_id IN(
		<foreach item="o" collection="list" open="" separator="," close="" >
			#{o.id}
		</foreach>
		)
	</delete>
	<update id="update" parameterType="BaseResources">
		UPDATE JY_BASE_RESOURCES 
		SET name=#{name} ,
			parentId=#{parentId},
			type=#{type},
			layer=#{layer},				
			resUrl=#{resUrl},
			btnId=#{btnId},
			btnFun=#{btnFun},
			icon=#{icon},
			sort=#{sort},
			isValid=#{isValid},		
			description=#{description},
			updateTime =#{updateTime}
		WHERE 
			id=#{id}
	</update>	
	<!-- 菜单树-->
    <select id="findMenuTree"  resultMap="base" parameterType="String">    		
	    SELECT JBR.ID,JBR.NAME,JBR.PARENTID,JBR.TYPE,JBR.RESURL,JBR.ICON,JBR.SORT,JBR.ISVALID
	  FROM JY_BASE_RESOURCES JBR
	 RIGHT JOIN(
	   SELECT DISTINCT JBRR.RESOURCES_ID 
	    FROM JY_BASE_ROLE_RESOURCES JBRR    
	    LEFT JOIN JY_BASE_ACCOUNT_ROLE JBAR ON JBAR.ROLEID=JBRR.ROLE_ID
	   WHERE JBAR.USERID = #{userId}) T
			ON T.RESOURCES_ID=JBR.ID 
			WHERE JBR.ISVALID=1 AND JBR.TYPE=1 AND JBR.LAYER=#{layer}
			ORDER BY JBR.PARENTID,JBR.SORT
    </select>  
    <!-- 按钮列 -->
    <select id="findBtn"  resultMap="base" parameterType="java.util.Map">    		
		SELECT jbm.name,jbm.parentId,jbm.type,jbm.resUrl,jbm.btnId,jbm.btnFun,jbm.icon,jbm.sort,jbm.isValid,jbm.layer
		FROM JY_BASE_RESOURCES jbm
		RIGHT JOIN(SELECT DISTINCT JBRR.RESOURCES_ID
               FROM JY_BASE_ROLE_RESOURCES JBRR
               LEFT JOIN JY_BASE_ACCOUNT_ROLE JBAR
                 ON JBAR.ROLEID = JBRR.ROLE_ID
              WHERE JBAR.USERID = #{userId}) T
    	ON T.RESOURCES_ID = jbm.id
		WHERE jbm.isValid=1 AND jbm.type=#{type}
       	AND jbm.parentId=#{menuId}
		ORDER BY jbm.sort
    </select> 
  <!-- 资源列表只含菜单不含按钮 -->
    <select id="listResources" resultMap="ZNodes" parameterType="BaseResources">    		
	   SELECT t.id as id,
	   		  t.name as name,
	   		  t.parentId as pId 
	   FROM JY_BASE_RESOURCES t WHERE t.type=1 AND t.layer=#{layer}
       ORDER BY t.parentId,t.sort
    </select>
	<select id="resAuthorized" resultMap="base" parameterType="java.util.Map">
		SELECT jbm.resUrl
		  FROM JY_BASE_RESOURCES jbm
		 RIGHT JOIN (select jbrm.*
		               from JY_BASE_ROLE_RESOURCES jbrm, JY_BASE_ACCOUNT_ROLE jbar
		              where jbar.roleid = jbrm.role_id
		                and jbar.userid = #{userId}) t
		    on jbm.id = t.resources_id
		 WHERE jbm.isValid = 1
		   AND jbm.type = #{type}
	</select>
	<select id="childCount"  resultType="int" parameterType="BaseResources">
       SELECT count(*) FROM JY_BASE_RESOURCES t WHERE t.parentId=#{parentId}
    </select>
    <select id="childBatchCount"  resultType="int" parameterType="BaseResources">
       SELECT count(*) FROM JY_BASE_RESOURCES t WHERE t.parentId IN(
		<foreach item="o" collection="list" open="" separator="," close="" >
			#{o.id}
		</foreach>
		)
    </select>         
    <select id="getSon"  parameterType="String" resultMap="baseAndson" >
	  SELECT jbr.* FROM JY_BASE_RESOURCES jbr 
	  WHERE jbr.parentId=#{id}      
	  ORDER BY jbr.parentId,jbr.type,jbr.sort
    </select>
    <update id="updateBatchLayer" parameterType="Map">  
        UPDATE JY_BASE_RESOURCES SET   
            layer=#{layer} 
        WHERE id IN(  
      	<foreach item="o" collection="list" open="" separator="," close="" >
			#{o}
		</foreach>
		) 
	</update>
</mapper>